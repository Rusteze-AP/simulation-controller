import { VerticalBox, Button, LineEdit, Slider } from "std-widgets.slint";

struct Drone {
    id : int,
    adjent: [int],
    not_adjacent: [int],
    pdr: float,
    crashed: bool,
    position_in_vector : int, // TO SOLVE PROBLEM OF ID
}

// no connection with other ClientServer because there cannot be a direct connection
struct ClientServer {
    id : int,
    drones_adjacent: [int],
    drones_not_adjacent: [int],
    position_in_vector: int,
}

struct Edge{
    id1: int,
    id2: int,
}

struct Message{
    id1: int,
    id2: int,
    msg_type: int, // 0 = packetSent, 1 packetDropped, 2 ControllerShortcut
}

component Drone inherits Rectangle{
    callback open_right_window;
    in property <string> label_id;

    height: 64px;
    width: 64px;
    preferred-height: 100%;
    preferred-width: 100%;
    border-radius: self.width/2;

    Text {
        text: label_id;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: black;
    }

    TouchArea {
        clicked => {
            open_right_window();
        }
    }
}

component ClientServer inherits Rectangle{
    callback open_right_window;
    in property <string> label_id;

    height: 64px;
    width: 64px;
    preferred-height: 100%;
    preferred-width: 100%;
    background: #d53939;
    border-radius: self.width/2;

    Text {
        text: label_id;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: black;
    }

    TouchArea {
        clicked => {
            open_right_window();
        }
    }
}

component Edge inherits Path {
    in property <int> x1;
    in property <int> x2;
    in property <int> y1;
    in property <int> y2;
    in-out property <float> start_x;
    in-out property <float> start_y;
    in-out property <float> end_x;
    in-out property <float> end_y;

    stroke: #ffffff;
    stroke-width: 2px;

    MoveTo {
        x: start_x;
        y: start_y;
    }
    LineTo {
        x: end_x;
        y: end_y;
    }
}

component Message inherits Rectangle{
    callback move_message();

    in-out property <float> end_x;
    in-out property <float> end_y;
    in-out property <float> current_x;
    in-out property <float> current_y;
    in-out property <float> step_x;
    in-out property <float> step_y;
    in-out property <int> counter;


    height: 12px;
    width: 12px;
    preferred-height: 100%;
    preferred-width: 100%;
    background: #d5d239;
    border-radius: self.width/2;
    x: current_x*1px -6px;
    y: current_y*1px -6px;
    counter: 20;
    animate background { duration: 800ms; } //-> MAYBE LATER
}


export component LeftMenu inherits Window{
    width: 350px;
    height: 1000px;
    preferred-height: 100%;
    preferred-width: 100%;

    in-out property <string> id_selected_client_server;
    in-out property <int> position_selected_client_server;
    in-out property <string> label_id;
    in-out property <ClientServer> selected;
    in-out property <int> edge_selected;
    callback remove_edge();
    callback add_edge();

    GridLayout {
        Row{
            Rectangle {
                // width: width;
                height: 50px;
                background: #a0b1e4;
                border-color: black;
                border-width: 0.5px;
                Text {
                    text: "Clent-Server Control: " + label_id;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: black;
                }
            }
        }   
    }

    for i in self.selected.drones_adjacent: Button {
        width: 175px;
        height: 50px;
        preferred-height: 100%;
        preferred-width: 100%;
        text: "Remove connection with " + i;
        x: 0px;
        y: 50px + i*50px;

        clicked => {
            edge_selected = i;
            if selected.drones_adjacent.length > 1{
                remove_edge();
            }else{
                self.text = "Can't remove last connection";
            }
        }
    }

    for d in self.selected.drones_not_adjacent: Button{
        width: 175px;
        height: 50px;
        preferred-height: 100%;
        preferred-width: 100%;
        text: "Add connection with " + d;
        x: 175px;
        y: 50px + d*50px;
        clicked => {
            edge_selected = d;
            add_edge();
        }
    }
}

export component RightMenu inherits Window{
    callback crash();
    callback reactivate_drone();
    callback remove_edge();
    callback add_edge();
    callback change_pdr();
    width: 400px;
    height: 1000px;
    preferred-height: 100%;
    preferred-width: 100%;
    in-out property <string> label_id;
    in-out property <Drone> selected_drone;
    in-out property <int> edge_selected;
    in-out property <float> tmp_pdr: selected_drone.pdr;

    GridLayout {
        Row{
            Rectangle {
                width: 400px;
                height: 50px;
                preferred-height: 100%;
                preferred-width: 100%;

                background: #a0b1e4;
                border-color: black;
                border-width: 0.5px;
                Text {
                    y: 0px;
                    text: "Drone control : " + selected_drone.id; 
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: black;
                }
                Text {
                    y:25px;
                    text: "Pdr : " + selected_drone.pdr; 
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: black;
                }
            }
        }

        Row{
            Button {
                text: "Crash drone";
                width: 400px;
                height: 50px;
                preferred-height: 100%;
                preferred-width: 100%;

                clicked => {
                    crash();
                }
            }
        }



        Row{
            Rectangle {
                width:400px;
                height: 150px;
                preferred-height: 100%;
                preferred-width: 100%;
                Text {
                    text: "Set packet drop rate to : " + tmp_pdr;
                    width:400px;
                    height: 100px;
                    horizontal-alignment: center;
                }
                Slider { 
                    width: 400px;
                    height: 50px;
                    preferred-height: 100%;
                    preferred-width: 100%;
                    maximum: 1;
                    minimum: 0;
                    step: 0.01;
                    value: tmp_pdr;
                    
                    changed(value) => {
                        tmp_pdr = value;
                    }
                }

                Button {
                    width: 100px;
                    height: 50px;
                    preferred-height: 100%;
                    preferred-width: 100%;
                    x: 150px;
                    y: 100px;
                    text: "Confirmed";
                    clicked => {
                        change_pdr();
                    }
                }
            }
        }

 
    }

    // TODO: sistemare posizionamento per connessioni (non in base all'id)
    for i in self.selected_drone.adjent: Button {
        preferred-width: 200px;
        preferred-height: 50px;
        // preferred-height: 100%;
        // preferred-width: 100%;
        text: "Remove connection with " + i;
        x: 0px;
        y: 250px + i*50px;

        clicked => {
            edge_selected = i;
            if selected_drone.adjent.length > 1{
                remove_edge();
            }else{
                self.text = "Can't remove last connection";
            }
        }
    }

    for d in self.selected_drone.not_adjacent: Button{
        preferred-width: 200px;
        preferred-height: 50px;
        // preferred-height: 100%;
        // preferred-width: 100%;
        text: "Add connection with " + d;
        x: 200px;
        y: 250px + d*50px;
        clicked => {
            edge_selected = d;
            add_edge();
        }
    }

}

component BottomWindow inherits Window{
    callback select_new_file();
    preferred-height: 50px;
    preferred-width: 200px;
    GridLayout {
        Row{
            Button {
                text: "Change configuration file";
                clicked()=>{
                    select_new_file();
                }
            }
        }
    }
}


export component Window inherits Window {
    callback open_right_window;
    callback select_new_file;
    callback reactivate_drone();
    callback clone_file();
    callback crash();
    callback remove_edge();
    callback remove_edge_client_server();
    callback add_edge();
    callback add_edge_client_server();
    callback remove_message();
    callback change_pdr();

    in-out property <int> id_selected_drone;
    in-out property <int> position_selected_drone: 0;
    in-out property <int> id_selected_client_server;
    in-out property <int> postition_selected_client_server: 0;
    in-out property <int> receiver_id;
    in-out property <int> sender_id;
    in-out property <[Drone]> drones; // tenere campo crashed e continuare a fare vedere i droni morti con background diverso e senza gesture
    in-out property <[ClientServer]> clients;
    in-out property <[ClientServer]> servers;
    in-out property <[Edge]> edges;
    in-out property<[Message]> messages;
    in-out property <float> new_pdr;

    preferred-height: 100%;
    preferred-width: 100%;
    background: #000000;

    for edge[i] in edges: Edge{
        x1: edges[i].id1<20 ? (parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * edges[i].id1 /10) + (64px / 2) +32px)/1px : (edges[i].id1<30 ?  (parent.width/5 +32px)/1px : (parent.width/5 + 2*parent.height / 3 + 275px +32px)/1px) ;
        y1: edges[i].id1<20 ?(parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * edges[i].id1 / 10) + (64px / 3) +32px)/1px: ( edges[i].id1<30 ? (parent.height/3 +(edges[i].id1 - 20) *175px +32px)/1px : (parent.height/3 +(edges[i].id1 -30)*175px + 32px)/1px);
        x2: edges[i].id2<20 ? (parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * edges[i].id2 /10) + (64px / 2) +32px)/1px : (edges[i].id2<30 ?  (parent.width/5 +32px)/1px : (parent.width/5 + 2*parent.height / 3 + 275px +32px)/1px);
        y2: edges[i].id2<20 ?(parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * edges[i].id2 / 10) + (64px / 3) +32px)/1px: ( edges[i].id2<30 ? (parent.height/3 +(edges[i].id2 - 20) *175px +32px)/1px : (parent.height/3 +(edges[i].id2 -30)*175px + 32px)/1px);

        x: self.x1 < self.x2 ? self.x1*1px   : self.x2*1px ;
        y: self.y1 < self.y2 ? self.y1*1px : self.y2*1px;
        width: self.x1 < self.x2 ? (self.x2 - self.x1)*1px : (self.x1 - self.x2)*1px;
        height: self.y1 < self.y2 ? (self.y2 - self.y1)*1px : (self.y1 - self.y2)*1px;
        start_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? 0 : self.width/1px;
        start_y: 0;
        end_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? self.width/1px : 0;
        end_y: self.height/1px;
    }

    for drone[i] in drones : Drone {
        width: 64px;
        height: 64px;
        // circular positioning
        x: parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * drone.id /10) + (self.width / 2);
        y: parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * drone.id / 10) + (self.height / 3);
        label_id: "Drone" + drone.id;
        background: !drone.crashed ? #3960D5 : #98abe6.mix(#e8e8e9, 0.5 + 0.5* Math.sin(animation-tick()/1s * 1turn));

        open_right_window => {
            if drone.crashed == false{
                id_selected_drone = drone.id;
                position_selected_drone = drone.position_in_vector;
            }
        }
    }


    for client[i] in clients : ClientServer {
        width: 64px;
        height: 64px;
        preferred-height: 100%;
        preferred-width: 100%;
        x: parent.width/5;
        y: parent.height/3 +i*175px;
        label_id: "Client" + client.id;
        background: red;


        open_right_window => {
            id_selected_client_server = client.id;
            postition_selected_client_server = client.position_in_vector;
        }
    }

    for server[i] in servers : ClientServer {
        width: 64px;
        height: 64px;
        preferred-height: 100%;
        preferred-width: 100%;
        x: parent.width/5 + 2*parent.height / 3 + 275px;
        y: parent.height/3 +i*175px;
        label_id: "Server" + server.id;
        background: green;

        open_right_window => {
            id_selected_client_server = server.id;
            postition_selected_client_server = server.position_in_vector;
        }
    }

    // TODO: sistemare posizione, colore, ecc.
    LeftMenu {
        x: 0;
        y: parent.height/5;
        label_id: id_selected_client_server<30? "client" + id_selected_client_server : "server" + id_selected_client_server;
        selected: id_selected_client_server<30? clients[postition_selected_client_server] : servers[postition_selected_client_server];

        remove_edge => {
            parent.receiver_id = self.edge_selected;
            parent.sender_id = id_selected_client_server;
            remove_edge_client_server();
        }

        add_edge => {
            parent.receiver_id = self.edge_selected;
            parent.sender_id = id_selected_client_server;
            add_edge_client_server();
        }
    }



    // TODO: sistemare posizione, colore, ecc.
    RightMenu {
        x: parent.width - self.width;
        y: parent.height/5;
        label_id: "drone" + id_selected_drone;
        selected_drone: drones[position_selected_drone];


        crash() => {
            crash();
            drones[position_selected_drone].crashed = true;
        }

        remove_edge => {
            if !drones[position_selected_drone].crashed{
                parent.receiver_id = self.edge_selected;
                parent.sender_id = drones[position_selected_drone].id;
                remove_edge();
            }
        }

        add_edge => {
            if !drones[position_selected_drone].crashed{
                parent.receiver_id = self.edge_selected;
                parent.sender_id = drones[position_selected_drone].id;
                add_edge();
            }
        }

        change_pdr() => {
            if !drones[position_selected_drone].crashed{
                new_pdr = self.tmp_pdr;
                change_pdr();
                drones[position_selected_drone].pdr = self.tmp_pdr;
            }
        }

    }



    for message[i] in messages : Message {
        current_x: messages[i].id1<20 ? (parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * messages[i].id1 /10) + (64px / 2) +32px)/1px : (messages[i].id1<30 ?  (parent.width/5 +32px)/1px : (parent.width/5 + 2*parent.height / 3 + 275px +32px)/1px) ;
        current_y: messages[i].id1<20 ?(parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * messages[i].id1 / 10) + (64px / 3) +32px)/1px: ( messages[i].id1<30 ? (parent.height/3 +(messages[i].id1 - 20) *175px +32px)/1px : (parent.height/3 +(messages[i].id1 -30)*175px + 32px)/1px);
        end_x: messages[i].id2<20 ? (parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * messages[i].id2 /10) + (64px / 2) +32px)/1px : (messages[i].id2<30 ?  (parent.width/5 +32px)/1px : (parent.width/5 + 2*parent.height / 3 + 275px +32px)/1px);
        end_y: messages[i].id2<20 ?(parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * messages[i].id2 / 10) + (64px / 3) +32px)/1px: ( messages[i].id2<30 ? (parent.height/3 +(messages[i].id2 - 20) *175px +32px)/1px : (parent.height/3 +(messages[i].id2 -30)*175px + 32px)/1px);

        step_x: (self.end_x - self.current_x) / self.counter;
        step_y: (self.end_y - self.current_y) / self.counter;
        background: messages[i].msg_type == 0 ? #d5d239: messages[i].msg_type == 1 ?#d53939 :#39d5d2;
        move_message => {
            self.current_x += self.step_x;
            self.current_y += self.step_y;
        }

        Timer {
            interval: 100ms;
            running: parent.counter == 0? false : true;
            triggered => {
                parent.counter = parent.counter - 1;
                parent.move_message();
            }
        }
    }

    BottomWindow {
        x: parent.width/2 - self.width/2;
        y: parent.height/20;

        select_new_file()=>{
            select_new_file();
        }
    }


}
