import { VerticalBox, Button, LineEdit, Slider } from "std-widgets.slint";

struct Drone {
    id : int,
    crashed: bool,
    adjent: [int],
    not_adjacent: [int],
    pdr: float,
}

struct Edge{
    id1: int,
    id2: int,
}

struct Message{
    id1: int,
    id2: int,
    msg_type: int, // 0 = packetSent, 1 packetDropped, 2 ControllerShortcut
}

component Drone inherits Rectangle{
    callback open_right_window;
    in property <string> label_id;

    height: 64px;
    width: 64px;
    background: #3960D5;
    border-radius: self.width/2;
    // animate background { duration: 800ms; } //-> MAYBE LATER

    Text {
        text: label_id;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: black;
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            // parent.background = #FF0000;
            open_right_window(); // to call the specific on circle
        }
    }
}

component Edge inherits Path {
    in property <int> x1;
    in property <int> x2;
    in property <int> y1;
    in property <int> y2;
    in-out property <float> start_x;
    in-out property <float> start_y;
    in-out property <float> end_x;
    in-out property <float> end_y;

    stroke: #ffffff;
    stroke-width: 2px;

    MoveTo {
        x: start_x;
        y: start_y;
    }
    LineTo {
        x: end_x;
        y: end_y;
    }
}

component Message inherits Rectangle{
    callback move_message();
    // callback open_right_window;
    // in property <string> label_id;
    // in-out property <float> start_x;
    // in-out property <float> start_y;
    in-out property <float> end_x;
    in-out property <float> end_y;
    in-out property <float> current_x;
    in-out property <float> current_y;
    in-out property <float> step_x;
    in-out property <float> step_y;
    in-out property <int> counter;


    height: 12px;
    width: 12px;
    background: #d5d239;
    border-radius: self.width/2;
    x: current_x*1px -6px;
    y: current_y*1px -6px;
    counter: 20;
    animate background { duration: 800ms; } //-> MAYBE LATER
}


component LeftMenu inherits GridLayout {
    callback select_file();
    visible: true;
    width: 300px;
    height: 500px;
    in property <string> selected_file;

    Row{
        Rectangle {
            // width: width;
            height: 50px;
            background: #a0b1e4;
            border-color: black;
            border-width: 0.5px;
            Text {
                text: "General Control";
                horizontal-alignment: center;
                vertical-alignment: center;
                color: black;
            }
        }
    }

    Row{
        Button {
            text: "Select File";
            width: 200px;
            height: 50px;

            clicked => {
                // Trigger the callback to select a file (defined in Rust)
                select_file();
            }
        }

        // Text displaying the selected file path
        Text {
            text: selected_file;
            horizontal-alignment: center;
            vertical-alignment: center;
            color: black;
            font-size: 16px;
            width: 200px;
            height: 50px;
        }

    }
}

export component RightMenu inherits Window{
    callback crash_drone();
    callback reactivate_drone();
    callback remove_edge();
    callback add_edge();
    callback change_pdr();
    width: 400px;
    height: 1000px;
    in property <string> label_id;
    in-out property <Drone> selected_drone;
    out property <int> edge_selected;
    in-out property <float> tmp_pdr: selected_drone.pdr;

    GridLayout {
        Row{
            Rectangle {
                // width: width;
                height: 50px;
                background: #a0b1e4;
                border-color: black;
                border-width: 0.5px;
                Text {
                    y: 0px;
                    text: "Node Control : " + selected_drone.id; 
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: black;
                }
                Text {
                    y:25px;
                    text: "Pdr : " + selected_drone.pdr; 
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: black;
                }
            }
        }

        Row{
            Button {
                text: "Crash drone";
                width: 200px;
                height: 50px;

                clicked => {
                    crash_drone();
                }
            }
        }



        Row{
            Text {
                text: "Set packet drop rate to : " + tmp_pdr;
                width:200px;
                height: 50px;
            }
        }
        Row{
            Slider { 
                width: 200px;
                height: 50px;
                maximum: 1;
                minimum: 0;
                step: 0.01;
                value: tmp_pdr;
                
                changed(value) => {
                    tmp_pdr = value;
                }
            }
        }
        Row{
            Button {
                width: 100px;
                height: 50px;
                text: "Confirmed";
                clicked => {
                    change_pdr();
                }
            }
        }
    }

    // TODO: sistemare posizionamento per connessioni (non in base all'id)
    for i in self.selected_drone.adjent: Button {
        width: 200px;
        height: 50px;
        text: "Remove connection with " + i;
        x: 0px;
        y: 250px + i*50px;

        clicked => {
            edge_selected = i;
            if selected_drone.adjent.length > 1{
                remove_edge();
            }else{
                self.text = "Can't remove last connection";
            }
        }
    }

    for d in self.selected_drone.not_adjacent: Button{
        width: 200px;
        height: 50px;
        text: "Add connection with " + d;
        x: 200px;
        y: 250px + d*50px;
        clicked => {
            edge_selected = d;
            add_edge();
        }
    }

}


export component MainWindow inherits Window {
    callback open_right_window;
    callback select_file;
    callback crash_drone();
    callback reactivate_drone();
    callback clone_file();
    callback remove_edges();
    callback remove_edge();
    callback add_edge();
    callback remove_message();
    callback change_pdr();

    in-out property <int> id_selected_drone;
    in-out property <int> edge_selected;
    in-out property <[Drone]> drones;
    in-out property <[Drone]> clients;
    in-out property <[Drone]> servers;
    in-out property <[Edge]> edges;
    in-out property<[Message]> messages;
    in-out property <float> new_pdr;


    width: 1920px;
    height: 1080px;
    background: #000000;

    for edge[i] in edges: Edge{

        x1: edges[i].id1<20 ? (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * edges[i].id1 /10) + (64px / 2) +32px)/1px : (1920px/5 +32px)/1px;
        y1: edges[i].id1<20 ?(1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * edges[i].id1 / 10) + (64px / 3) +32px)/1px: (1080px/3 +(edges[i].id1 - 20) *175px +32px)/1px;
        x2: edges[i].id2<30 ? (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * edges[i].id2 /10) + (64px / 2) +32px)/1px : (1920px/5 + 2*1080px / 3 + 275px +32px)/1px;
        y2: edges[i].id2<30 ?(1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * edges[i].id2 / 10) + (64px / 3) +32px)/1px : (1080px/3 +(edges[i].id2 -30)*175px + 32px)/1px;

        x: self.x1 < self.x2 ? self.x1*1px   : self.x2*1px ;
        y: self.y1 < self.y2 ? self.y1*1px : self.y2*1px;
        width: self.x1 < self.x2 ? (self.x2 - self.x1)*1px : (self.x1 - self.x2)*1px;
        height: self.y1 < self.y2 ? (self.y2 - self.y1)*1px : (self.y1 - self.y2)*1px;
        start_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? 0 : self.width/1px;
        start_y: 0;
        end_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? self.width/1px : 0;
        end_y: self.height/1px;
    }

    for drone[i] in drones : Drone {
        width: 64px;
        height: 64px;
        // circular positioning
        x: parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * i /10) + (self.width / 2);
        y: parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * i / 10) + (self.height / 3);
        label_id: "Drone" + drone.id;
        background: drones[i].crashed ? #65839b4e : #3960D5;
        visible: drones[i].crashed ? false : true;

        open_right_window => {
            id_selected_drone = drone.id;
        }
    }


    for client[i] in clients : Drone {
        width: 64px;
        height: 64px;
        x: parent.width/5;
        y: parent.height/3 +i*175px;
        label_id: "Client" + client.id;
        background: red;
    //     // propagate the solved status from the model to the tile
    //     clicked => {
    //         // drone.image_visible = !drone.image_visible;
    //         clicked();
    //     }
    }

    for server[i] in servers : Drone {
        width: 64px;
        height: 64px;
        x: parent.width/5 + 2*parent.height / 3 + 275px;
        y: parent.height/3 +i*175px;
        label_id: "Server" + server.id;
        background: green;
    //     // propagate the solved status from the model to the tile
    //     clicked => {
    //         // drone.image_visible = !drone.image_visible;
    //         clicked();
    //     }
    }


    // TODO: sistemare posizione, colore, ecc.
    LeftMenu {
        x: 0;
        y: parent.height/2;
        select_file => {
            select_file();
        }
    }



    // TODO: sistemare posizione, colore, ecc.
    RightMenu {
        x: parent.width - self.width;
        y: parent.height/4;
        label_id: "drone" + id_selected_drone;
        selected_drone: drones[id_selected_drone];

        crash_drone => {
            if !drones[id_selected_drone].crashed{
                drones[id_selected_drone].crashed = true;
                remove_edges();
            }
        }

        reactivate_drone => {
            if drones[id_selected_drone].crashed{
                drones[id_selected_drone].crashed = false;
            }
        }

        remove_edge => {
            parent.edge_selected = self.edge_selected;
            remove_edge();
        }

        add_edge => {
            parent.edge_selected = self.edge_selected;
            add_edge();
        }

        change_pdr() => {
            new_pdr = self.tmp_pdr;
            change_pdr();
            drones[id_selected_drone].pdr = self.tmp_pdr;
        }

    }



    for message[i] in messages : Message {
        current_x: messages[i].id1<20 ? (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * messages[i].id1 /10) + (64px / 2) +32px)/1px : (messages[i].id1<30 ?  (1920px/5 +32px)/1px : (1920px/5 + 2*1080px / 3 + 275px +32px)/1px) ;
        current_y: messages[i].id1<20 ?(1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * messages[i].id1 / 10) + (64px / 3) +32px)/1px: ( messages[i].id1<30 ? (1080px/3 +(messages[i].id1 - 20) *175px +32px)/1px : (1080px/3 +(messages[i].id1 -30)*175px + 32px)/1px);
        end_x: messages[i].id2<20 ? (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * messages[i].id2 /10) + (64px / 2) +32px)/1px : (messages[i].id2<30 ?  (1920px/5 +32px)/1px : (1920px/5 + 2*1080px / 3 + 275px +32px)/1px);
        end_y: messages[i].id2<20 ?(1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * messages[i].id2 / 10) + (64px / 3) +32px)/1px: ( messages[i].id2<30 ? (1080px/3 +(messages[i].id2 - 20) *175px +32px)/1px : (1080px/3 +(messages[i].id2 -30)*175px + 32px)/1px);

        step_x: (self.end_x - self.current_x) / self.counter;
        step_y: (self.end_y - self.current_y) / self.counter;
        background: messages[i].msg_type == 0 ? #d5d239: messages[i].msg_type == 1 ?#d53939 :#39d5d2;

        move_message => {
            self.current_x += self.step_x;
            self.current_y += self.step_y;
        }

        Timer {
            interval: 100ms;
            running: parent.counter == 0? false : true;
            triggered => {
                parent.counter = parent.counter - 1;
                parent.move_message();
            }
        }
    }


}
