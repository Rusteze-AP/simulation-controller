import { VerticalBox, Button, LineEdit, Slider } from "std-widgets.slint";
import { DroneStruct } from "structs/drone.slint";
import { MessageStruct } from "structs/message.slint";
import { ClientServerStruct } from "structs/client_server.slint";
import { EdgeStruct } from "structs/edge.slint";

import { DroneComponent } from "components/drone.slint";
import { ClientServerComponent } from "components/client_server.slint";
import { EdgeComponent } from "components/edge.slint";
import { MessageComponent } from "components/message.slint";
import { LeftMenu } from "components/left_menu.slint";
import { RightMenu } from "components/right_menu.slint";
import { UpWindow } from "components/up_window.slint";
import { Legend } from "components/legend.slint";

component Window inherits Window {
    callback open_right_window;
    callback select_new_file;
    callback reactivate_drone();
    callback clone_file();
    callback crash();
    callback remove_edge();
    callback remove_edge_client_server();
    callback add_edge();
    callback add_edge_client_server();
    callback remove_message();
    callback change_pdr();

    in-out property <int> id_selected_drone : drones[0].id;
    in-out property <float> node_size : self.width/30px;
    in-out property <int> position_selected_drone: 0;
    in-out property <int> id_selected_client_server: clients[0].id;
    in-out property <int> postition_selected_client_server: 0;
    in-out property <int> type_selected:1; //client = 1, server = 2
    in-out property <int> receiver_id;
    in-out property <int> sender_id;
    in-out property <[DroneStruct]> drones; // tenere campo crashed e continuare a fare vedere i droni morti con background diverso e senza gesture
    in-out property <[ClientServerStruct]> clients;
    in-out property <[ClientServerStruct]> servers;
    in-out property <[EdgeStruct]> edges;
    in-out property<[MessageStruct]> messages;
    in-out property <float> new_pdr;

    preferred-height: 100%;
    preferred-width: 100%;
    background: #000000;

    for edge[i] in edges: EdgeComponent{
        x1: edges[i].node_type1==0 ? (parent.width/2.15 + (parent.height / 4) * cos(2 * 1rad * 3.14159 * edges[i].id1 /10) + (node_size*1px / 2) + 1px*node_size/2)/1px : (edges[i].node_type1==1?  (parent.width/4 +1px*node_size/2)/1px : (parent.width - parent.width/3 +1px*node_size/2)/1px) ;
        y1: edges[i].node_type1==0 ?(parent.height/2.5 +(parent.height / 4) * sin(2 * 1rad* 3.14159 * edges[i].id1 / 10) + (node_size*1px / 3) +1px*node_size/2)/1px: ( edges[i].node_type1==1 ? (parent.height/3 +(edges[i].index1) *parent.height/6 +1px*node_size/2)/1px : (parent.height/3 +(edges[i].index1)*parent.height/6 + 1px*node_size/2)/1px);
        x2: edges[i].node_type2==0 ? (parent.width/2.15 + (parent.height / 4) * cos(2 * 1rad * 3.14159 * edges[i].id2 /10) + (node_size*1px / 2) +1px*node_size/2)/1px : (edges[i].node_type2==1 ?  (parent.width/4 +1px*node_size/2)/1px : (parent.width - parent.width/3 +1px*node_size/2)/1px);
        y2: edges[i].node_type2==0 ?(parent.height/2.5 +(parent.height / 4) * sin(2 * 1rad* 3.14159 * edges[i].id2 / 10) + (node_size*1px / 3) +1px*node_size/2)/1px: ( edges[i].node_type2==1 ? (parent.height/3 +(edges[i].index2) *parent.height/6 +1px*node_size/2)/1px : (parent.height/3 +(edges[i].index2)*parent.height/6 + 1px*node_size/2)/1px);

        x: self.x1 < self.x2 ? self.x1*1px   : self.x2*1px ;
        y: self.y1 < self.y2 ? self.y1*1px : self.y2*1px;
        width: self.x1 < self.x2 ? (self.x2 - self.x1)*1px : (self.x1 - self.x2)*1px;
        height: self.y1 < self.y2 ? (self.y2 - self.y1)*1px : (self.y1 - self.y2)*1px;
        start_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? 0 : self.width/1px;
        start_y: 0;
        end_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? self.width/1px : 0;
        end_y: self.height/1px;
        // stroke : @linear-gradient(0deg, edges[i].node_type1==0? rgb(255-255*drones[edges[i].index1].pdr,255-255*drones[edges[i].index1].pdr,255-255*drones[edges[i].index1].pdr) : rgb(255,255,255), edges[i].node_type2==0? rgb(255-255*drones[edges[i].index2].pdr,255-255*drones[edges[i].index2].pdr,255-255*drones[edges[i].index2].pdr) : rgb(255,255,255));
        stroke: #ffffff;
    }

    for drone[i] in drones : DroneComponent {
        width: node_size*1px;
        height: node_size*1px;
        // circular positioning
        x: parent.width/2.15 + (parent.height / 4) * cos(2 * 1rad * 3.14159 * drone.id /10) + (self.width / 2);
        y: parent.height/2.5 +(parent.height / 4) * sin(2 * 1rad* 3.14159 * drone.id / 10) + (self.height / 3);
        label_id: "Drone" + drone.id;
        background: !drone.crashed ? #3960D5 : #98abe6.mix(#e8e8e9, 0.5 + 0.5* Math.sin(animation-tick()/1s * 1turn));
        

        open_right_window => {
            if drone.crashed == false{
                id_selected_drone = drone.id;
                position_selected_drone = drone.position_in_vector;
            }
        }
    }


    for client[i] in clients : ClientServerComponent {
        width: node_size*1px;
        height: node_size*1px;
        preferred-height: 100%;
        preferred-width: 100%;
        x: parent.width/4;
        y: parent.height/3 +i*parent.height/6;
        label_id: "Client" + client.id;
        background: red;


        open_right_window => {
            id_selected_client_server = client.id;
            postition_selected_client_server = client.position_in_vector;
            type_selected = 1;
        }
    }

    for server[i] in servers : ClientServerComponent {
        width: node_size*1px;
        height: node_size*1px;
        preferred-height: 100%;
        preferred-width: 100%;
        // x: parent.width/5 + 2*parent.height/4+ parent.width/7;
        x: parent.width - parent.width/3;
        y: parent.height/3 +i*parent.height/6;
        label_id: "Server" + server.id;
        background: green;

        open_right_window => {
            id_selected_client_server = server.id;
            postition_selected_client_server = server.position_in_vector;
            type_selected = 2;
        }
    }

    // TODO: sistemare posizione, colore, ecc.
    LeftMenu {
        width: parent.width/5;
        height: parent.height;

        x: 0;
        y: parent.height/8;
        label_id: type_selected==1? "client" + id_selected_client_server : "server" + id_selected_client_server;
        selected: type_selected==1? clients[postition_selected_client_server] : servers[postition_selected_client_server];

        remove_edge => {
            parent.receiver_id = self.edge_selected;
            parent.sender_id = id_selected_client_server;
            remove_edge_client_server();
        }

        add_edge => {
            parent.receiver_id = self.edge_selected;
            parent.sender_id = id_selected_client_server;
            add_edge_client_server();
        }
    }



    // TODO: sistemare posizione, colore, ecc.
    RightMenu {
        width: parent.width/5;
        height: parent.height;

        x: parent.width - self.width;
        y: parent.height/8;
        label_id: "drone" + id_selected_drone;
        selected_drone: drones[position_selected_drone];


        crash() => {
            crash();
            drones[position_selected_drone].crashed = true;
        }

        remove_edge => {
            if !drones[position_selected_drone].crashed{
                parent.receiver_id = self.edge_selected;
                parent.sender_id = drones[position_selected_drone].id;
                remove_edge();
            }
        }

        add_edge => {
            if !drones[position_selected_drone].crashed{
                parent.receiver_id = self.edge_selected;
                parent.sender_id = drones[position_selected_drone].id;
                add_edge();
            }
        }

        change_pdr() => {
            if !drones[position_selected_drone].crashed{
                new_pdr = self.tmp_pdr;
                change_pdr();
                drones[position_selected_drone].pdr = self.tmp_pdr;
            }
        }

    }



    for message[i] in messages : MessageComponent {
        current_x: messages[i].node_type1==0 ? (parent.width/2.15 + (parent.height / 4) * cos(2 * 1rad * 3.14159 * messages[i].id1 /10) + (node_size*1px / 2) +1px*node_size/2)/1px : (messages[i].node_type1==1 ?  (parent.width/4 +1px*node_size/2)/1px : (parent.width - parent.width/3 +1px*node_size/2)/1px) ;
        current_y: messages[i].node_type1==0?(parent.height/2.5 +(parent.height / 4) * sin(2 * 1rad* 3.14159 * messages[i].id1 / 10) + (node_size*1px / 3) +1px*node_size/2)/1px: ( messages[i].node_type1==1 ? (parent.height/3 +(messages[i].index1) *parent.height/6 +1px*node_size/2)/1px : (parent.height/3 +(messages[i].index1)*parent.height/6 + 1px*node_size/2)/1px);
        end_x: messages[i].node_type2==0 ? (parent.width/2.15 + (parent.height / 4) * cos(2 * 1rad * 3.14159 * messages[i].id2 /10) + (node_size*1px / 2) +1px*node_size/2)/1px : (messages[i].node_type2==1 ?  (parent.width/4 +1px*node_size/2)/1px : (parent.width - parent.width/3 +1px*node_size/2)/1px);
        end_y: messages[i].node_type2==0 ?(parent.height/2.5 +(parent.height / 4) * sin(2 * 1rad* 3.14159 * messages[i].id2 / 10) + (node_size*1px / 3) +1px*node_size/2)/1px: ( messages[i].node_type2==1 ? (parent.height/3 +(messages[i].index2) *parent.height/6 +1px*node_size/2)/1px : (parent.height/3 +(messages[i].index2)*parent.height/6 + 1px*node_size/2)/1px);

        step_x: (self.end_x - self.current_x) / self.counter;
        step_y: (self.end_y - self.current_y) / self.counter;
        background: messages[i].msg_type == 0 ? #d5d239: messages[i].msg_type == 1 ? #52fc03: messages[i].msg_type == 2? #fc0303 : messages[i].msg_type == 3 ? #3f70da : messages[i].msg_type == 4 ? #7b99db : messages[i].msg_type == 5 ? #d87d7d : #2bccd8;
        move_message => {
            self.current_x += self.step_x;
            self.current_y += self.step_y;
        }

        Timer {
            interval: 100ms;
            running: parent.counter == 0? false : true;
            triggered => {
                parent.counter = parent.counter - 1;
                parent.move_message();
            }
        }
    }

    UpWindow {
        x: parent.width/2 - self.width/2;
        y: parent.height/20;

        select_new_file()=>{
            select_new_file();
        }
    }

    Legend {
        x: parent.width/2 - self.width/2;
        y: parent.height - parent.height/20 - self.height;
        width-size: parent.width/40px;
        height-size: parent.height/50px;
    }

}
