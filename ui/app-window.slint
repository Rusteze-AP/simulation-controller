import { VerticalBox, Button, LineEdit } from "std-widgets.slint";

struct Drone {
    id : int,
    crashed: bool,
    adjent: [int],
    pdr: float,
}

struct Edge{
    id1: int,
    id2: int,
}

component Drone inherits Rectangle{
    callback open_right_window;
    in property <string> label_id;

    height: 64px;
    width: 64px;
    background: #3960D5;
    border-radius: self.width/2;
    // animate background { duration: 800ms; } //-> MAYBE LATER

    Text {
        text: label_id;
        horizontal-alignment: center;
        vertical-alignment: center;
        color: black;
    }

    TouchArea {
        clicked => {
            // Delegate to the user of this element
            // parent.background = #FF0000;
            open_right_window(); // to call the specific on circle
        }
    }
}

component Edge inherits Path {
    in property <int> x1;
    in property <int> x2;
    in property <int> y1;
    in property <int> y2;
    in-out property <float> start_x;
    in-out property <float> start_y;
    in-out property <float> end_x;
    in-out property <float> end_y;

    stroke: #000000;
    stroke-width: 2px;

    // LineTo {
    //     x: 100;
    //     y: 100;
    // }

    MoveTo {
        x: start_x;
        y: start_y;
    }
    LineTo {
        x: end_x;
        y: end_y;
    }


    // MoveTo {
    //     x: 0;
    //     y: 0;
    // }
    // LineTo {
    //     x: 1;
    //     y: 1;
    // }
    

    // ArcTo {
    //     radius-x: 1;
    //     radius-y: 1;
    //     x: 100;
    //     y: 100;
    // }
    // LineTo {
    //     x: 100;
    //     y: 100;
    // }
    // Close {
    // }
}


component LeftMenu inherits GridLayout {
    callback select_file();
    visible: true;
    width: 300px;
    height: 500px;
    in property <string> selected_file;

    Row{
        Rectangle {
            // width: width;
            height: 50px;
            color: #a0b1e4;
            border-color: black;
            border-width: 0.5px;
            Text {
                text: "General Control";
                horizontal-alignment: center;
                vertical-alignment: center;
                color: black;
            }
        }
    }

    Row{
        Button {
            text: "Select File";
            width: 200px;
            height: 50px;
    
            clicked => {
                // Trigger the callback to select a file (defined in Rust)
                select_file();
            }
        }
    
        // Text displaying the selected file path
        Text {
            text: selected_file;
            horizontal-alignment: center;
            vertical-alignment: center;
            color: black;
            font-size: 16px;
            width: 200px;
            height: 50px;
        }

    }
}

export component RightMenu inherits GridLayout {
    callback crash_drone();
    callback reactivate_drone();
    visible: true;
    width: 300px;
    height: 500px;
    in property <string> label_id;

    Row{
        Rectangle {
            // width: width;
            height: 50px;
            color: #a0b1e4;
            border-color: black;
            border-width: 0.5px;
            Text {
                text: "Node Control : " + label_id;
                horizontal-alignment: center;
                vertical-alignment: center;
                color: black;
            }
        }
    }

    Row{
        Button {
            text: "Crash drone";
            width: 200px;
            height: 50px;
    
            clicked => {
                crash_drone();
            }
        }
    }

    Row{
        Button {
            text: "Re-activate drone";
            width: 200px;
            height: 50px;
    
            clicked => {
                reactivate_drone();
            }
        }
    }
}


export component MainWindow inherits Window {
    callback open_right_window;
    callback select_file;
    callback crash_drone();
    callback reactivate_drone();
    callback clone_file();
    width: 1920px;
    height: 1080px;
    property <int> id_selected_drone;
    in-out property <string> test;
    in-out property <[Drone]> drones;
    in-out property <[Drone]> clients;
    in-out property <[Drone]> servers;
    in-out property <[Edge]> edges_dd;
    
    for drone[i] in drones : Drone {
        width: 64px;
        height: 64px;
        // circular positioning
        x: parent.width/2.15 + (parent.height / 3) * cos(2 * 1rad * 3.14159 * i /10) + (self.width / 2);
        y: parent.height/2.5 +(parent.height / 3) * sin(2 * 1rad* 3.14159 * i / 10) + (self.height / 3);    
        label_id: "Drone" + drone.id;
        background: drones[i].crashed ? #65839b4e : #3960D5;

        // TODO: create connections between drones
        
    
        open_right_window => {
            id_selected_drone = drone.id;
        }
    }


    for client[i] in clients : Drone {
        width: 64px;
        height: 64px;
        x: parent.width/5;
        y: parent.height/3 +i*175px;  
        label_id: "Client" + client.id;
        background: red;
    //     // propagate the solved status from the model to the tile
    //     clicked => {
    //         // drone.image_visible = !drone.image_visible;
    //         clicked();
    //     }
    }

    for server[i] in servers : Drone {
        width: 64px;
        height: 64px;
        x: parent.width/5 + 2*parent.height / 3 + 275px; 
        y: parent.height/3 +i*175px;  
        label_id: "Server" + server.id;
        background: green;
    //     // propagate the solved status from the model to the tile
    //     clicked => {
    //         // drone.image_visible = !drone.image_visible;
    //         clicked();
    //     }
    }
    


    LeftMenu {
        x: 0;
        y: parent.height/2;
        select_file => {
            select_file();
        }
    }

    RightMenu {
        x: parent.width - self.width;
        y: parent.height/2;
        label_id: "drone" + id_selected_drone + test;
        crash_drone => {
            if !drones[id_selected_drone].crashed{
                drones[id_selected_drone].crashed = true;
            }
        }

        reactivate_drone => {
            if drones[id_selected_drone].crashed{
                drones[id_selected_drone].crashed = false;
            }
        }
    }


    for edge[i] in edges_dd: Edge{

        x1: (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * edges_dd[i].id1 /10) + (64px / 2) +32px)/1px;
        y1: (1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * edges_dd[i].id1 / 10) + (64px / 3) +32px)/1px; 
        x2: (1920px/2.15 + (1080px / 3) * cos(2 * 1rad * 3.14159 * edges_dd[i].id2 /10) + (64px / 2) +32px)/1px;
        y2: (1080px/2.5 +(1080px / 3) * sin(2 * 1rad* 3.14159 * edges_dd[i].id2 / 10) + (64px / 3) +32px)/1px; 

        x: self.x1 < self.x2 ? self.x1*1px   : self.x2*1px ;
        y: self.y1 < self.y2 ? self.y1*1px : self.y2*1px;
        width: self.x1 < self.x2 ? (self.x2 - self.x1)*1px : (self.x1 - self.x2)*1px;
        height: self.y1 < self.y2 ? (self.y2 - self.y1)*1px : (self.y1 - self.y2)*1px;
        start_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? 0 : self.width/1px;  
        start_y: 0;
        end_x: (self.x1 > self.x2 && self.y1 > self.y2) ||  (self.x2 > self.x1 && self.y2 > self.y1) ? self.height/1px : 0;
        end_y: self.height/1px;
    }
    
}