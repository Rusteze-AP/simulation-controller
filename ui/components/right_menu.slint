import {Drone} from "../structs/drone.slint";
import { VerticalBox, Button, Slider } from "std-widgets.slint";

export component RightMenu inherits Window{
    callback crash();
    callback reactivate_drone();
    callback remove_edge();
    callback add_edge();
    callback change_pdr();


    in-out property <string> label_id;
    in-out property <Drone> selected_drone;
    in-out property <int> edge_selected;
    in-out property <float> tmp_pdr: selected_drone.pdr;


    Rectangle {
        width: parent.width;
        height: parent.height/20;
        x: 0px;
        y: 0px;

        background: #a0b1e4;
        border-color: black;
        border-width: 0.5px;
        Text {
            width: parent.width;
            y: parent.height/3;
            text: "Drone control : " + selected_drone.id; 
            horizontal-alignment: center;
            vertical-alignment: center;
            color: black;
        }
        Text {
            width: parent.width;
            y: 2*parent.height/3;
            text: "Pdr : " + selected_drone.pdr; 
            horizontal-alignment: center;
            vertical-alignment: center;
            color: black;
        }
    }

    Button {
        text: "Crash drone";
        x: 0px;
        y: 4*parent.height/20;
        width: parent.width;
        height: parent.height/21;

        clicked => {
            crash();
        }
    }

    Rectangle {
        x:0px;
        y: parent.height/20;
        width:parent.width;
        height: 2*parent.height/20;
        preferred-height: 100%;
        preferred-width: 100%;
        Text {
            text: "Set packet drop rate to : " + tmp_pdr;
            width:parent.width;
            height: 2*parent.height/3;
            horizontal-alignment: center;
        }
        Slider { 
            width: parent.width;
            height: parent.height/3;
            preferred-height: 100%;
            preferred-width: 100%;
            maximum: 1;
            minimum: 0;
            step: 0.01;
            value: tmp_pdr;
            
            changed(value) => {
                tmp_pdr = value;
            }
        }

        Button {
            width: parent.width/4;
            height: parent.height/3;
            preferred-height: 100%;
            preferred-width: 100%;
            x: parent.width/2 - parent.width/8;
            y: 2*parent.height/3;
            text: "Confirmed";
            clicked => {
                change_pdr();
            }
        }
    }

    for i in self.selected_drone.adjent: Button {
        width: parent.width/2;
        height: parent.height/20;

        text: "Remove link with " + i;
        x: 0px;
        y: 5*parent.height/20 + i*parent.height/20;

        clicked => {
            edge_selected = i;
            if selected_drone.adjent.length > 1{
                remove_edge();
            }else{
                self.text = "Can't remove last link";
            }
        }
    }

    for d in self.selected_drone.not_adjacent: Button{
        width: parent.width/2;
        preferred-height: parent.height/20;
        text: "Add link with " + d;
        x: parent.width/2;
        y: 5*parent.height/20 + d*parent.height/20;
        clicked => {
            edge_selected = d;
            add_edge();
        }
    }

}